plugins {
    id 'com.github.johnrengelman.shadow' version '5.2.0'
    id 'java'
    id "org.sonarqube" version "2.7"
}

dependencies {
    implementation project(":kun-workflow:kun-workflow-core")
    implementation project(":kun-workflow:kun-workflow-utils")
    implementation project(":kun-commons:kun-commons-db")
    implementation project(":kun-commons:kun-commons-testing")
    implementation project(":kun-commons:kun-commons-utils")
    implementation project(":kun-workflow:kun-workflow-utils")
    implementation 'com.typesafe:config'
    implementation 'org.json:json'
    implementation 'ch.qos.logback:logback-classic'
    implementation 'org.elasticsearch.client:elasticsearch-rest-high-level-client'
    implementation 'org.apache.commons:commons-lang3'
    implementation 'org.postgresql:postgresql'
    implementation 'org.apache.hive:hive-jdbc'
    implementation 'mysql:mysql-connector-java'
    implementation "org.apache.curator:curator-recipes"
    implementation "io.prestosql:presto-jdbc"
    implementation "org.mongodb:mongo-java-driver"
    implementation "org.jooq:joor-java-8:0.9.12"
    implementation "com.amazonaws:aws-java-sdk-glue"
    implementation "com.syncron.amazonaws:simba-athena-jdbc-driver"
    implementation "com.arangodb:arangodb-java-driver"
    implementation "io.sentry:sentry-logback"
    testImplementation "junit:junit"
    testRuntimeOnly "com.h2database:h2"
    testRuntimeOnly "org.mockito:mockito-core"
}

shadowJar {
    baseName = 'kun-metadata'
    classifier = null
    version = 1.0
    manifest {
        attributes(
                'Main-Class': 'com.miotech.kun.metadata.schedule.DataBuilderScheduler'
        )
    }
    zip64 true
}

apply plugin: "com.bmuschko.docker-remote-api"
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
task buildDockerImage(type: DockerBuildImage) {
    inputDir = file('.')
    images.add(System.getenv("DOCKER_URL")+'mioyingtech/'+project.name+':'+System.getenv("TAG_METADATA"))
    
}
docker {
     registryCredentials {
        url = System.getenv("DOCKER_URL")
        username = System.getenv("DOCKER_USER")
        password = System.getenv("DOCKER_PASS")
     }
 } 
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage
task buildPushImage(type: DockerPushImage) {
    dependsOn buildDockerImage
    images.add(System.getenv("DOCKER_URL")+'mioyingtech/'+project.name+':'+System.getenv("TAG_METADATA"))
    
}

apply plugin: "org.sonarqube"