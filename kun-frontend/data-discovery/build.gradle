buildscript {
  dependencies {
    classpath "com.github.node-gradle:gradle-node-plugin:2.2.4"
  }
}

plugins {
  id "org.sonarqube" version "2.7"
}



apply plugin: 'com.github.node-gradle.node'

node {
    version = "12.13.0"
    yarnVersion = "1.9.4"
    download = true
}

// task installYarn(type: Exec) {
//   workingDir './'
//   def commands = []
//   if (System.getProperty("os.name").toLowerCase().startsWith("windows")) {
//     commands << 'cmd'
//     commands << '/c'
//     commands << 'npm install -g yarn'
//   } else {
//     commands << 'bash'
//     commands << '-c'
//     commands << 'npm install -g yarn'
//   }
//   commandLine = commands
// }

// task yarnBuild(type: YarnTask) {
// 	workingDir './'
//   def commands = []
//   if (System.getProperty("os.name").toLowerCase().startsWith("windows")) {
//     commands << 'cmd'
//     commands << '/c'
//     commands << 'yarn run build'
//   } else {
//     commands << 'bash'
//     commands << '-c'
//     commands << 'yarn run build'
//   }
//   commandLine = commands
// }

// //调用yarn run build命令的Gradle任务
task yarnBuild(type: YarnTask) {
  group = 'node'
  args = ['run', 'build']
}
yarnBuild.dependsOn(yarn_install)

apply plugin: "com.bmuschko.docker-remote-api"
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
task buildDockerImage(type: DockerBuildImage) {
    inputDir = file('.')
    images.add(System.getenv("DOCKER_URL")+'mioyingtech/'+'kun-data-discovery-frontend'+':'+System.getenv("TAG_DATA_DISCOVERY_FRONTEND"))
    
}
docker {
     registryCredentials {
      url = System.getenv("DOCKER_URL")
        username = System.getenv("DOCKER_USER")
        password = System.getenv("DOCKER_PASS")
     }
 } 
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage
task buildPushImage(type: DockerPushImage) {
    dependsOn buildDockerImage
    images.add(System.getenv("DOCKER_URL")+'mioyingtech/'+'kun-data-discovery-frontend'+':'+System.getenv("TAG_DATA_DISCOVERY_FRONTEND"))
    
}

apply plugin: "org.sonarqube"
sonarqube {
    properties {
        property "sonar.sourceEncoding", "."
        property "sonar.sourceEncoding", "UTF-8"
    }
}