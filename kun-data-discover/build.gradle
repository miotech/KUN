plugins {
	id 'org.springframework.boot' version '2.2.2.RELEASE'
	id 'io.spring.dependency-management' version '1.0.9.RELEASE'
	id 'java'
	id "io.freefair.lombok" version "5.1.0"
	id "org.sonarqube" version "2.7"
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
	implementation project(':kun-commons:kun-commons-utils')
	// tag::actuator[]
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	// end::actuator[]
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-jdbc'
	implementation 'org.postgresql:postgresql:42.2.12'
	implementation 'com.googlecode.json-simple:json-simple:1.1.1'
	implementation 'org.apache.commons:commons-lang3'
	implementation 'com.google.code.gson:gson'
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
	testImplementation enforcedPlatform('io.zonky.test.postgres:embedded-postgres-binaries-bom:11.6.0')
	testImplementation 'io.zonky.test:embedded-database-spring-test:1.5.4'
	// end::tests[]
}

test {
	useJUnitPlatform()
}

// apply plugin: "com.bmuschko.docker-remote-api"
// import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
// task buildDockerImage(type: DockerBuildImage) {
//     inputDir = file('.')
//     images.add(System.getenv("DOCKER_URL")+'mioyingtech/'+project.name+':'+System.getenv("TAG_DATA_DISCOVERY"))
    
// }
// docker {
//      registryCredentials {
//      	url = System.getenv("DOCKER_URL")
//         username = System.getenv("DOCKER_USER")
//         password = System.getenv("DOCKER_PASS")
//      }
//  } 
// import com.bmuschko.gradle.docker.tasks.image.DockerPushImage
// task buildPushImage(type: DockerPushImage) {
//     dependsOn buildDockerImage
//     images.add(System.getenv("DOCKER_URL")+'mioyingtech/'+project.name+':'+System.getenv("TAG_DATA_DISCOVERY"))
    
// }

apply plugin: "org.sonarqube"
sonarqube {
    properties {
        property "sonar.sourceEncoding", "src/main"
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.java.binaries", "build"
    }
}